{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app \"__main__\" (lazy loading)\n",
      " * Environment: production\n",
      "   WARNING: This is a development server. Do not use it in a production deployment.\n",
      "   Use a production WSGI server instead.\n",
      " * Debug mode: off\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n",
      "127.0.0.1 - - [24/Jul/2020 15:12:27] \"\u001b[37mGET / HTTP/1.1\u001b[0m\" 200 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "static\\images\\download.jpg\n",
      "4\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\catch\\miniconda3\\envs\\tensorflow\\lib\\site-packages\\keras_preprocessing\\image\\utils.py:104: UserWarning: grayscale is deprecated. Please use color_mode = \"grayscale\"\n",
      "  warnings.warn('grayscale is deprecated. Please use '\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "127.0.0.1 - - [24/Jul/2020 15:12:47] \"\u001b[37mPOST /predict HTTP/1.1\u001b[0m\" 200 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.2\n",
      "[6]\n",
      "5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "127.0.0.1 - - [24/Jul/2020 15:13:00] \"\u001b[37mGET / HTTP/1.1\u001b[0m\" 200 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "static\\images\\Blue_Tshirt.jpg\n",
      "4\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\catch\\miniconda3\\envs\\tensorflow\\lib\\site-packages\\keras_preprocessing\\image\\utils.py:104: UserWarning: grayscale is deprecated. Please use color_mode = \"grayscale\"\n",
      "  warnings.warn('grayscale is deprecated. Please use '\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "127.0.0.1 - - [24/Jul/2020 15:13:26] \"\u001b[37mPOST /predict HTTP/1.1\u001b[0m\" 200 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.2\n",
      "[2]\n",
      "5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "127.0.0.1 - - [24/Jul/2020 15:14:38] \"\u001b[37mGET / HTTP/1.1\u001b[0m\" 200 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "#Import necessary libraries\n",
    "from flask import Flask, render_template, request\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from keras_preprocessing.image import load_img\n",
    "from keras_preprocessing.image import img_to_array\n",
    "from tensorflow.keras.models import load_model\n",
    "import os\n",
    "\n",
    "# Create flask instance\n",
    "app = Flask(__name__)\n",
    "\n",
    "#Set Max size of file as 10MB.\n",
    "app.config['MAX_CONTENT_LENGTH'] = 10 * 1024 * 1024\n",
    "\n",
    "#Allow files with extension png, jpg and jpeg\n",
    "ALLOWED_EXTENSIONS = ['png', 'jpg', 'jpeg']\n",
    "def allowed_file(filename):\n",
    "    return '.' in filename and \\\n",
    "           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n",
    "\n",
    "def init():\n",
    "    global graph\n",
    "    graph = tf.compat.v1.get_default_graph()\n",
    "\n",
    "# Function to load and prepare the image in right shape\n",
    "def read_image(filename):\n",
    "    # Load the image\n",
    "    img = load_img(filename, grayscale=True, target_size=(28, 28))\n",
    "    # Convert the image to array\n",
    "    img = img_to_array(img)\n",
    "    # Reshape the image into a sample of 1 channel\n",
    "    img = img.reshape(1, 28, 28, 1)\n",
    "    # Prepare it as pixel data\n",
    "    img = img.astype('float32')\n",
    "    img = img / 255.0\n",
    "    return img\n",
    "\n",
    "@app.route(\"/\", methods=['GET', 'POST'])\n",
    "def home():\n",
    "    print(\"1\")\n",
    "    return render_template('home.html')\n",
    "\n",
    "@app.route(\"/predict\", methods = ['GET','POST'])\n",
    "def predict():\n",
    "    if request.method == 'POST':\n",
    "        file = request.files['file']\n",
    "        try:\n",
    "            print(\"2\")\n",
    "            if file and allowed_file(file.filename):\n",
    "                print(\"3\")\n",
    "                filename = file.filename\n",
    "                file_path = os.path.join('static\\images', filename)\n",
    "                file.save(file_path)\n",
    "                print(file_path)\n",
    "                img = read_image(file_path)\n",
    "                # Predict the class of an image\n",
    "\n",
    "                with graph.as_default():\n",
    "                    print(\"4\")\n",
    "                    model1 = load_model('clothing_classification_model.h5')\n",
    "                    print(\"4.1\")\n",
    "                    class_prediction = model1.predict_classes(img)\n",
    "                    print(\"4.2\")\n",
    "                    print(class_prediction)\n",
    "\n",
    "                #Map apparel category with the numerical class\n",
    "                if class_prediction[0] == 0:\n",
    "                  product = \"T-shirt/top\"\n",
    "                elif class_prediction[0] == 1:\n",
    "                  product = \"Trouser\"\n",
    "                elif class_prediction[0] == 2:\n",
    "                  product = \"Pullover\"\n",
    "                elif class_prediction[0] == 3:\n",
    "                  product = \"Dress\"\n",
    "                elif class_prediction[0] == 4:\n",
    "                  product = \"Coat\"\n",
    "                elif class_prediction[0] == 5:\n",
    "                  product = \"Sandal\"\n",
    "                elif class_prediction[0] == 6:\n",
    "                  product = \"Shirt\"\n",
    "                elif class_prediction[0] == 7:\n",
    "                  product = \"Sneaker\"\n",
    "                elif class_prediction[0] == 8:\n",
    "                  product = \"Bag\"\n",
    "                else:\n",
    "                  product = \"Ankle boot\"\n",
    "                print(\"5\")\n",
    "                return render_template('predict.html', product = product, user_image = file_path)\n",
    "        except Exception as e:\n",
    "            print(\"end\")\n",
    "            print(e)\n",
    "            return \"Unable to read the file. Please check if the file extension is correct.\"\n",
    "\n",
    "    return render_template('predict.html')\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    init()\n",
    "    app.run()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.7 (tensorflow)",
   "language": "python",
   "name": "tensorflow"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
